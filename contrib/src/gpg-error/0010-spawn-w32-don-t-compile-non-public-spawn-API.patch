From ec0bd69513d2c1ea4148a0aef545f89c997fedd6 Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@ycbcr.xyz>
Date: Thu, 23 Oct 2025 12:22:17 +0200
Subject: [PATCH 10/12] spawn-w32: don't compile non-public spawn API

The calls are already disabled in visibility.c
---
 src/gpgrt-int.h   |  2 ++
 src/spawn-posix.c |  6 ++++++
 src/spawn-w32.c   | 18 ++++++++++++++++++
 3 files changed, 26 insertions(+)

diff --git a/src/gpgrt-int.h b/src/gpgrt-int.h
index adddb26..0e6b268 100644
--- a/src/gpgrt-int.h
+++ b/src/gpgrt-int.h
@@ -635,6 +635,7 @@ gpg_err_code_t _gpgrt_make_pipe (int filedes[2], estream_t *r_fp,
 #define _gpgrt_create_outbound_pipe(a,b,c) _gpgrt_make_pipe ((a), (b),  1, (c))
 
 
+#if 0
 /* Fork and exec the program PGMNAME.
  *
  * If R_INFP is NULL connect stdin of the new process to /dev/null; if
@@ -723,6 +724,7 @@ gpg_err_code_t _gpgrt_spawn_process_fd (const char *pgmname,
 gpg_err_code_t _gpgrt_spawn_process_detached (const char *pgmname,
                                               const char *argv[],
                                               const char *envp[]);
+#endif
 
 /* If HANG is true, waits for the process identified by PROCESS_ID to
  * exit; if HANG is false, checks whether the process has terminated.
diff --git a/src/spawn-posix.c b/src/spawn-posix.c
index 8e36ee1..fe6124d 100644
--- a/src/spawn-posix.c
+++ b/src/spawn-posix.c
@@ -254,6 +254,7 @@ get_all_open_fds (void)
 #endif /*0*/
 
 
+#if 0
 /* The exec core used right after the fork.  This will never return.  */
 static void
 do_exec (const char *pgmname, const char *argv[],
@@ -326,6 +327,7 @@ do_exec (const char *pgmname, const char *argv[],
   /* No way to print anything, as we have may have closed all streams. */
   _exit (127);
 }
+#endif
 
 
 /* Helper for _gpgrt_make_pipe.  */
@@ -428,6 +430,7 @@ convert_from_process (gpgrt_process_t process_id)
 }
 
 
+#if 0
 /* Fork and exec the PGMNAME, see gpgrt-int.h for details.  */
 gpg_err_code_t
 _gpgrt_spawn_process (const char *pgmname, const char *argv[],
@@ -600,6 +603,7 @@ _gpgrt_spawn_process_fd (const char *pgmname, const char *argv[],
   *r_process_id = convert_from_pid (pid);
   return 0;
 }
+#endif
 
 
 /* Waiting for child processes.
@@ -855,6 +859,7 @@ _gpgrt_wait_processes (const char **pgmnames, gpgrt_process_t *process_ids,
 }
 
 
+#if 0
 /* See gpgrt-int.h for a description.  FIXME: We should add a prexec
  * callback. */
 gpg_err_code_t
@@ -922,6 +927,7 @@ _gpgrt_spawn_process_detached (const char *pgmname, const char *argv[],
 
   return 0;
 }
+#endif
 
 
 /* Kill a process; that is send an appropriate signal to the process.
diff --git a/src/spawn-w32.c b/src/spawn-w32.c
index eca56c0..07f10bf 100644
--- a/src/spawn-w32.c
+++ b/src/spawn-w32.c
@@ -65,6 +65,20 @@
 #define fd_to_handle(a)  ((HANDLE)(a))
 #define handle_to_fd(a)  ((intptr_t)(a))
 
+#if !WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP) && defined(__MINGW64_VERSION_MAJOR)
+  typedef struct _STARTUPINFOEXA {
+    STARTUPINFOA StartupInfo;
+    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
+  } STARTUPINFOEXA,*LPSTARTUPINFOEXA;
+
+  typedef struct _STARTUPINFOEXW {
+    STARTUPINFOW StartupInfo;
+    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
+  } STARTUPINFOEXW,*LPSTARTUPINFOEXW;
+
+# define STARTF_USESHOWWINDOW 0x00000001
+# define STARTF_USESTDHANDLES 0x00000100
+#endif
 
 /* Return the maximum number of currently allowed open file
  * descriptors.  Only useful on POSIX systems but returns a value on
@@ -407,6 +421,7 @@ convert_from_process (gpgrt_process_t process_id)
 }
 
 
+#if 0
 /* Fork and exec the PGMNAME, see gpgrt-int.h for details.  */
 gpg_err_code_t
 _gpgrt_spawn_process (const char *pgmname, const char *argv[],
@@ -754,6 +769,7 @@ _gpgrt_spawn_process_fd (const char *pgmname, const char *argv[],
   *r_process_id = convert_from_handle (pi.hProcess);
   return 0;
 }
+#endif
 
 
 /* See gpgrt-int.h for a description.  */
@@ -848,6 +864,7 @@ _gpgrt_wait_processes (const char **pgmnames, gpgrt_process_t *process_ids,
 }
 
 
+#if 0
 /* See gpgrt-int.h for a description.  */
 gpg_err_code_t
 _gpgrt_spawn_process_detached (const char *pgmname, const char *argv[],
@@ -928,6 +945,7 @@ _gpgrt_spawn_process_detached (const char *pgmname, const char *argv[],
 
   return 0;
 }
+#endif
 
 
 /* Kill a process; that is send an appropriate signal to the process.
-- 
2.45.1.windows.1

